
1.) Write a blog on Difference between HTTP1.1 vs HTTP2

In HTTP/2, developers have hands-on, detailed control over prioritization. This allows them to maximize perceived and actual page load speed to a degree that was not possible in HTTP/1.1.

HTTP/2 offers a feature called weighted prioritization. This allows developers to decide which page resources will load first, every time.
 In HTTP/2, when a client makes a request for a webpage, the server sends several streams of data to the client at once, instead of sending one thing after another.
 This method of data delivery is known as multiplexing.
 Developers can assign each of these data streams a different weighted value, and the value tells the client which data stream to render first.

Multiplexing: 
HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it.
 In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource.
 HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.

Server push:
 Typically, a server only serves content to a client device if the client asks for it. However, this approach is not always practical for modern webpages,
 which often involve several dozen separate resources that the client must request.
 HTTP/2 solves this problem by allowing a server to "push" content to a client before the client asks for it.
 The server also sends a message letting the client know what pushed content to expect – like if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.

Header compression:
 Small files load more quickly than large ones.
 To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller.
 However, HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information in HTTP header packets.
 This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in loading even a single webpage, those bytes add up quickly, resulting in faster loading.


2.) Write a blog about objects and its internal representation in Javascript

Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. These objects are quite different from JavaScript’s primitive 
data-types(Number, String, Boolean, null, undefined and symbol) in the sense that while these primitive data-types all store a single value each (depending on their types).
Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. That reference or pointer points to the location 
in memory where the object is stored. The variables don’t actually store the value.objects in JavaScript may be defined as an unordered collection of related data, of primitive or 
reference types, in the form of “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.
For Eg. If your object is a student, it will have properties like name, age, address, id, etc

Properties:
A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. Object properties are basically the same as 
ordinary JavaScript variables, except for the attachment to objects. The properties of an object define the characteristics of the object.
Template to access properties: objectName.propertyName

Unassigned properties of an object are undefined 
Eg:myCar.color;

Properties of JavaScript objects can also be accessed or set using a bracket notation (for more details see property accessors). Objects are sometimes called associative arrays, 
since each property is associated with a string value that can be used to access it.
Eg: myCar['company'] = 'Ford';

An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string.
Any property name that is not a valid JavaScript identifier can only be accessed using the square bracket notation. 
This notation is also very useful when property names are to be dynamically determined
Eg: 
var myObj = new Object(),
    str = 'myString',
    rand = Math.random(),
    obj = new Object();
myObj.type              = 'Dot syntax';
myObj['date created']   = 'String with space';
myObj[str]              = 'String value';
myObj[rand]             = 'Random Number';
myObj[obj]              = 'Object';
myObj['']               = 'Even an empty string';console.log(myObj);

You can use the bracket notation with for...in to iterate over all the enumerable properties of an object.
function showProps(obj, objName) {
  var result = ``;
  for (var i in obj) {
    // obj.hasOwnProperty() is used to filter out properties from the object's prototype chain
    if (obj.hasOwnProperty(i)) {
      result += `${objName}.${i} = ${obj[i]}\n`;
    }
  }
  return result;
}
   




